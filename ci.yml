
name: NextDeploy  CI/CD

on:
  push:
    branches: [ "main", "develop" ]
    tags: [ "v*" ]
  pull_request:
    branches: [ "main", "develop" ]
  workflow_dispatch:
    inputs:
      force_release:
        description: 'Force release (ignore version check)'
        required: false
        default: 'false'
        type: boolean

# Kill redundant runs for the same ref
concurrency:
  group: ci-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  GOTOOLCHAIN: local
  GO_VERSION: "1.25.x"
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

permissions:
  contents: read
  packages: write
  security-events: write

jobs:
  # Security and quality checks
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@v2
        with:
          egress-policy: audit

      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          check-latest: true

      - name: Install and Run Gosec
        run: |
          go install github.com/securego/gosec/v2/cmd/gosec@latest
          $(go env GOPATH)/bin/gosec -fmt sarif -out gosec.sarif ./... 
          fail_on_issue: false
      
      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gosec.sarif

      - name: Run govulncheck
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./...

  # Linting and code quality
  lint:
    name: Lint & Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@v2
        with:
          egress-policy: audit

      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          check-latest: true

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest
          args: --timeout=5m

      - name: Go Format Check
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "The following files are not formatted:"
            gofmt -s -l .
            exit 1
          fi

      - name: Go Mod Verify
        run: go mod verify

      - name: Go Mod Tidy Check
        run: |
          go mod tidy
          if ! git diff --quiet; then
            echo "go mod tidy resulted in changes"
            git diff
            exit 1
          fi

  # Build and test matrix
  build-test:
    name: Build & Test (${{ matrix.os }} / Go ${{ matrix.go }})
    runs-on: ${{ matrix.os }}
    needs: [security-scan, lint]
    strategy:
      fail-fast: false
      matrix:
        go: [ "1.24.x", "1.23.x" ]
        os: [ ubuntu-latest, macos-latest, windows-latest ]
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@v2
        with:
          egress-policy: audit

      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go }}
          check-latest: true
          cache: false

      # Enhanced caching strategy
      - name: Cache Go modules and build cache
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
            %LocalAppData%\go-build
          key: ${{ runner.os }}-go-${{ matrix.go }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ matrix.go }}-
            ${{ runner.os }}-go-

      - name: Print Environment
        run: |
          echo "Go version: $(go version)"
          echo "Go env GOOS: $(go env GOOS)"
          echo "Go env GOARCH: $(go env GOARCH)"
          echo "Runner OS: ${{ runner.os }}"
          echo "Runner Arch: ${{ runner.arch }}"

      - name: Download dependencies
        run: go mod download

      - name: Verify dependencies
        run: go mod verify

      - name: Static analysis
        run: go vet ./...

      - name: Run tests with coverage
        run: |
          go test -race -coverprofile=coverage.out -covermode=atomic -v ./...
          go tool cover -html=coverage.out -o coverage.html
        shell: bash

      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest' && matrix.go == '1.24.x'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella

      # Build binaries for testing
      - name: Build CLI binary
        run: |
          mkdir -p bin
          go build -trimpath -ldflags="-s -w -X main.version=${{ github.ref_name }} -X main.commit=${{ github.sha }} -X main.date=$(date -u +%Y-%m-%dT%H:%M:%SZ)" -o bin/nextdeploy${{ runner.os == 'Windows' && '.exe' || '' }} ./cli
        shell: bash

      - name: Build Daemon binary (Linux only)
        if: runner.os == 'Linux'
        run: |
          go build -trimpath -ldflags="-s -w -X main.version=${{ github.ref_name }} -X main.commit=${{ github.sha }} -X main.date=$(date -u +%Y-%m-%dT%H:%M:%SZ)" -o bin/nextdeployd ./daemon
        shell: bash

      # Smoke tests
      - name: Smoke test CLI
        run: |
          ./bin/nextdeploy${{ runner.os == 'Windows' && '.exe' || '' }} --version || ./bin/nextdeploy${{ runner.os == 'Windows' && '.exe' || '' }} --help
        shell: bash

      - name: Smoke test Daemon (Linux only)
        if: runner.os == 'Linux'
        run: |
          ./bin/nextdeployd --version || ./bin/nextdeployd --help
        shell: bash

  # Cross-platform build matrix for CLI
  build-multiplatform-cli:
    name: Cross-Platform CLI Build
    runs-on: ubuntu-latest
    needs: [build-test]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64  # Windows ARM64 support is limited
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@v2
        with:
          egress-policy: audit

      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          check-latest: true

      - name: Build CLI for ${{ matrix.goos }}/${{ matrix.goarch }}
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          mkdir -p dist
          BINARY_NAME="nextdeploy-${{ matrix.goos }}-${{ matrix.goarch }}"
          if [ "${{ matrix.goos }}" = "windows" ]; then
            BINARY_NAME="${BINARY_NAME}.exe"
          fi
          
          go build \
            -trimpath \
            -ldflags="-s -w -X main.version=${{ github.ref_name }} -X main.commit=${{ github.sha }} -X main.date=$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
            -o "dist/${BINARY_NAME}" \
            ./cli
            
          # Create checksums
          if command -v sha256sum >/dev/null; then
            cd dist && sha256sum "${BINARY_NAME}" > "${BINARY_NAME}.sha256"
          fi

      - name: Upload CLI artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nextdeploy-cli-${{ matrix.goos }}-${{ matrix.goarch }}
          path: dist/
          retention-days: 30

  # Linux daemon builds
  build-linux-daemon:
    name: Linux Daemon Build
    runs-on: ubuntu-latest
    needs: [build-test]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    strategy:
      matrix:
        goarch: [amd64, arm64]
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@v2
        with:
          egress-policy: audit

      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          check-latest: true

      - name: Build Daemon for linux/${{ matrix.goarch }}
        env:
          GOOS: linux
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          mkdir -p dist
          BINARY_NAME="nextdeployd-linux-${{ matrix.goarch }}"
          
          go build \
            -trimpath \
            -ldflags="-s -w -X main.version=${{ github.ref_name }} -X main.commit=${{ github.sha }} -X main.date=$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
            -o "dist/${BINARY_NAME}" \
            ./daemon
            
          # Create checksums
          cd dist && sha256sum "${BINARY_NAME}" > "${BINARY_NAME}.sha256"

      - name: Upload Daemon artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nextdeployd-linux-${{ matrix.goarch }}
          path: dist/
          retention-days: 30

  # Docker build for daemon
  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [build-test]
    if: github.event_name == 'push'
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@v2
        with:
          egress-policy: audit

      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # GoReleaser for releases
  goreleaser:
    name: GoReleaser
    runs-on: ubuntu-latest
    needs: [build-multiplatform-cli, build-linux-daemon]
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@v2
        with:
          egress-policy: audit

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          check-latest: true

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Deployment to staging/production (placeholder)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-docker]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: staging
    steps:
      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add your deployment logic here

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [goreleaser]
    if: startsWith(github.ref, 'refs/tags/v')
    environment: production
    steps:
      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."

  # Notify on completion
  notify:
    name: Notify Build Status
    runs-on: ubuntu-latest
    needs: [build-test, build-multiplatform-cli, build-linux-daemon, build-docker]
    if: always()
    steps:
      - name: Notify success
        if: ${{ needs.build-test.result == 'success' }}
        run: |
          echo "✅ Build completed successfully!"
          # Add notification logic (Slack, Discord, etc.)
          
      - name: Notify failure
        if: ${{ needs.build-test.result == 'failure' }}
        run: |
          echo "❌ Build failed!"
          # Add notification logic (Slack, Discord, etc.)
